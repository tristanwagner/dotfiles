" use vim like tail => open file and put this in it
" :set autoread | au CursorHold * checktime | call feedkeys("lh")
"
" Vim settings for https://github.com/tristanwagner
"
" exemple de regex pour matcher interface (ITestInterface) {
" ou interface (ITest) extends {
"
" \(interface \)\@<=\(\w*\)\(\s\)\@=
" \@<= : match apres le token
" \@=  : no match apres le token et sur le token
" 
" copier tous les resultats d'une regex dans une variable t
" 
" :let t=[] | %s/\(interface \)\@<=\(\w*\)\(\s\)\@=/\=add(t,submatch(2))[len(t)-1]/g
"
" dans la partie replace on va executer une commande \=add() pour ajouter le
" match a t
" submatch(2) car ce qui nous interesse est le 2eme objet matché (ce quil y a
" entre 'interface ' et ' {'
" ensuite on pointe sur l'index de t [len(t) - 1] pour remplacer par le match
" que l'on vient de retirer comme ça le fichier ne bouge pas
" maintenant pour coller le contenu de la variable t on peut faire
" 
" "=tp
" ou encore :pu=t
" ou encore :pu=join(t, ', ')
"
" autre exemple
"
" :let t=[] | %s/\<case\s\+\(\w\+\):\zs/\=add(t,submatch(1))[1:0]/g
"
" :g and :v permets de selectionner des lignes, g pour inclure v pour exclure
" la commande a appliquer peut etre nimporte quoi.. par exemple 
"
" :g/-/norm @a pour appliquer la macro a aux lignes contenant -
"
" ou
"
" :v/-/s/word/newword pour remplacer word par newword sur toutes les lignes
" qui ne contiennent pas -
" 
" :g/include/command
"
" :v/exclude/command
"
" command peut etre t0 ou t$ pour copier ces lignes la ou est le curseur
"
" Settings in this file may depend on plugins, so let's install them first.
" Not to be confused with the contents of ~/.vim/plugin/* which are
" configuration options for each plugin and automatically loaded by Vim
"
" Effective editing of multiple files in Vim
" https://jovica.org/posts/vim-edit-multiple-files/
"
" list all files with Bad in it and put in in args
" :args `git grep -l Bad`
"
" :argsdo %s/\CBad/\CGood/ge | update

source ~/.vim/plugin/plugins.vim

autocmd!

" Leader Mappings
map <Space> <leader>
"map <Leader>w :update<CR>
map <Leader>q :qall<CR>
map <Leader>gs :Gstatus<CR>
" file content to hexdump
map <Leader>hex :%!xxd<CR>
" reverse
map <Leader>bin :%!xxd -r<CR>

"cycle throught registers
nnoremap <Leader>r :let @x=@" \| let @"=@0 \| let @0=@1 \| let @1=@x \| reg "01<CR>

" Nerdtree
map <C-b> :NERDTreeToggle<CR>

" CtrlP use FZF (faster!)
nnoremap <C-f> <Esc><Esc>:Files!<Cr>
inoremap <C-f> <Esc><Esc>:BLines!<Cr>
nnoremap <C-g> <Esc><Esc>:BCommits!<Cr>
" use bat for nice syntax hl in preview
" not needed anymore it will be highlighted if installed
" let $FZF_DEFAULT_OPTS="--preview 'bat --color=always --style=header,grid --line-range :300 {}'"

" make tab go to matching pair
" this overrides ctrl-i which is actually useful ...
"nnoremap <Tab> %

" Visual mode pressing * searches for the current selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
" prettify json
nnoremap <Leader>json :%!python -m json.tool<CR>
"node version :)
""" nnoremap <Leader>p :%!node <<< \"console.log(JSON.stringify($(cat), null, 2))\"<CR>
"to convert json to js object we can use also node
":%!node <<< console.dir(\'$(cat)\', { depth: null })

" useful tabs keybinds
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <C-r>=expand("%:p:h")<cr>/

" move through windows with ctrl
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Disable highlights when pressing ENTER
nnoremap <silent> <cr> :noh<cr>

" search result mid screen
nnoremap n nzz
nnoremap N Nzz

"Cope
"Query :help cope if you are unsure what cope is. It's super useful!
"When you search with Ack.vim or other quickfix windows, display your results in cope by doing: <leader>cc
"To go to the next search result do: <leader>n
"To go to the previous search results do: <leader>p
"Cope mappings:
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
"close quickfix
map <leader>cq :ccl<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>
" to apply a command to all files in quicklist we can do
" :cfdo or :cdo
" if it modifies the file we can to :cdo <stuff> | update
" | update allow to save the file after the modification
" This is an example of bulk search and replace
" populate de arglist with sheel cmd 
" :args `git grep -l findme`
" :argdo %s/findme/replacement/gc | update
 
" only issue with this is that
" for example if you use
" vim file1 file2
" and use :bw, the buffer won't be removed
" you'd need to do :argdo bw
" but then it'll remove every file so
" I will see in future if I find an elegant solution
function QuitTabOrBuffer()
  if tabpagenr('$') > 1
    execute "tabclose"
  elseif bufnr('$') > 1
    execute "bw"
  else
    execute "q"
  endif
endfunction

" ex mode is useless instead quite current context
nnoremap <silent> Q :call QuitTabOrBuffer()<CR>
" old one
" nnoremap Q :q<CR>

" ragequit
nnoremap <C-q> :q!<CR>

" git status
nnoremap <Leader>g :Git<CR>

" use ag instead of ack ?
if executable('ag')
  let g:ackprg = 'ag --vimgrep --hidden --smart-case --path-to-ignore ~/.ignore'
endif

cnoreabbrev ag Ack!
cnoreabbrev aG Ack!
cnoreabbrev Ag Ack!
cnoreabbrev AG Ack!
cnoreabbrev Ack Ack!

" When you press gv you Ack after the selected text
vnoremap <silent> <leader>f :call VisualSelection('gv', '')<CR>
" fuzzy search
" nnoremap <Leader>f :tabnew<CR>:Ack!<Space>""<left>
nnoremap <Leader>f :Ack!<Space>""<left>

" grab between
" nnoremap <leader>gb :let t=[] | %s/\(<+b-start+>\)\@<=\(<+pattern+>\)\(<+b-end+>\)\@=/\=add(t,submatch(2))[len(t)-1]/g

" async search
let g:ack_use_dispatch = 1

" Fast saving
nmap <leader>w :w!<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

syntax enable

"-------------------------------------------------------------------------------
" Colors & Formatting
"-------------------------------------------------------------------------------

" Colorscheme
set termguicolors
autocmd vimenter * colorscheme gruvbox
autocmd vimenter * AirlineTheme gruvbox
let g:gruvbox_invert_selection = 0
let g:gruvbox_invert_tabline = 0
" stopped using molokai because for some reason
" it started to load in about 6secs..
"autocmd vimenter * colorscheme molokai
set background=dark

" displays better title in gnome terminal tab :)
set mouse=a                           " enable mouse
set list                              " enable invisible chars
set nocompatible
set hidden                            " hidde buffers instead of closing them
set smartindent
set title
set wildmenu                          " Tab autocomplete in command mode
set backspace=indent,eol,start        " http://vi.stackexchange.com/a/2163
set clipboard=unnamed                 " Clipboard support (OSX)
set laststatus=2                      " Show status line on startup
set splitbelow splitright                        " Open new splits to the right
"set splitbelow                        " Open new splits to the bottom
"set lazyredraw                        " Reduce the redraw frequency, this one
"fuck up the scroll
set nolazyredraw                        " Reduce the redraw frequency
set ttyfast                           " Send more characters in fast terminals
set nowrap                            " Don't wrap long lines
set listchars=extends:→               " Show arrow if line continues rightwards
set listchars+=precedes:←             " Show arrow if line continues leftwards
set nobackup nowritebackup noswapfile " Turn off backup files
set noerrorbells novisualbell         " Turn off visual and audible bells
set expandtab shiftwidth=2 tabstop=2  " Two spaces for tabs everywhere
set history=500
set hlsearch                          " Highlight search results
set ignorecase smartcase              " Search queries intelligently set case
set incsearch                         " Show search results as you type
set timeoutlen=1000 ttimeoutlen=0     " Remove timeout when hitting escape
set showcmd                           " Show size of visual selection
set smarttab

set pastetoggle=<F12>                  " Paste mode is cool if you paste a big chunk of text

" Persistent undo
set undodir=~/.vim/undo/
set undofile
set undolevels=1000
set undoreload=10000

" Ignored files/directories from autocomplete (and CtrlP)
set wildignore+=*/tmp/*
set wildignore+=*.so
set wildignore+=*.zip
set wildignore+=*/vendor/bundle/*
set wildignore+=*/node_modules/

" Set to auto read when a file is changed from the outside
set autoread
au FocusGained,BufEnter * checktime

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Properly disable sound on errors on MacVim
if has("gui_macvim")
    autocmd GUIEnter * set vb t_vb=
endif
"-------------------------------------------------------------------------------
" Interface
"-------------------------------------------------------------------------------

set number            " Enable line numbers
set scrolloff=5       " Leave 5 lines of buffer when scrolling
set sidescrolloff=10  " Leave 10 characters of horizontal buffer when scrolling

" kitty issue
let &t_ut=''

"-------------------------------------------------------------------------------
" Specific file types and snippets
"-------------------------------------------------------------------------------

" File skeletons
autocmd BufNewFile README.md 0r ~/dotfiles/vim/vim.symlink/skeletons/README.md

autocmd BufNewFile *.sh 0r ~/dotfiles/vim/vim.symlink/skeletons/bash.sh

" turn off syntax if file is big
autocmd Filetype scss if getfsize(@%) > 300 | setlocal syntax=OFF | endif

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.ts,*.json,*.adoc,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

" CPP
autocmd filetype cpp call SetCPPOptions()

function! SetCPPOptions()
  "execute
  nnoremap <F1> :w <bar> !g++ -std=c++14 -g -Wshadow -Wall -o "%:r" "%" -O2 -Wno-used-result <CR>
  nnoremap <F2> :w <bar> !"./%:r"<CR>
endfunction

" C
autocmd filetype c call SetCOptions()

function! SetCOptions()
  "execute
  nnoremap <F1> :w <bar> !gcc -g -Wshadow -Wall -o "%:r" "%" -O2<CR>
  nnoremap <F2> :w <bar> !"./%:r"<Left>
  "nnoremap <F5> :w <bar> term"./%:r"<CR>
endfunction

" js
autocmd filetype javascript call SetJSOptions()

function! SetJSOptions()
  "execute
  nnoremap <F2> :w <bar> !node "%"<CR>
  "snippets
  call JSSnippets()
endfunction

function! JSSnippets()
  " Wrap in logging
  nmap <leader>l yssfconsole.log<cr>
  "snippets
  nnoremap ,for o<Esc>:-1read $HOME/.vim/snippets/js/fori.js<CR>f.i
  nnoremap ,fin o<Esc>:-1read $HOME/.vim/snippets/js/forin.js<CR>f)i
  nnoremap ,fof o<Esc>:-1read $HOME/.vim/snippets/js/forof.js<CR>f)i
  nnoremap ,whi o<Esc>:-1read $HOME/.vim/snippets/js/while.js<CR>f)i
  nnoremap ,swi o<Esc>:-1read $HOME/.vim/snippets/js/switch.js<CR>f)i
  nnoremap ,nfn o<Esc>:-1read $HOME/.vim/snippets/js/nfn.js<CR>f=hi
  nnoremap ,clg o<Esc>:-1read $HOME/.vim/snippets/js/clg.js<CR>f)i
  nnoremap ,clo o<Esc>:-1read $HOME/.vim/snippets/js/clo.js<CR>:s/<++>//g<left><left>
  nnoremap ,cti o<Esc>:-1read $HOME/.vim/snippets/js/cti.js<CR>f'a
  nnoremap ,cte o<Esc>:-1read $HOME/.vim/snippets/js/cte.js<CR>f'a
  nnoremap ,ctm ddo<Esc>:-1read $HOME/.vim/snippets/js/ctm.js<CR>jVp:%s/<++>//g<left><left>
  nnoremap ,prom o<Esc>:-1read $HOME/.vim/snippets/js/prom.js<CR>ji<Tab>
  nnoremap ,sto o<Esc>:-1read $HOME/.vim/snippets/js/sto.js<CR>ji<Tab>
  nnoremap ,sti o<Esc>:-1read $HOME/.vim/snippets/js/sti.js<CR>ji<Tab>
  nnoremap ,anfn i<CR><Esc>:-1read $HOME/.vim/snippets/js/anfn.js<CR>0i<BS><Esc>JF)i
  nnoremap ,imp o<Esc>:-1read $HOME/.vim/snippets/js/imp.js<CR>:s/<++>//g<left><left>
  nnoremap ,imn o<Esc>:-1read $HOME/.vim/snippets/js/imn.js<CR>f'a
  nnoremap ,imd o<Esc>:-1read $HOME/.vim/snippets/js/imd.js<CR>f}i
  nnoremap ,mde o<Esc>:-1read $HOME/.vim/snippets/js/mde.js<CR>f}i
  nnoremap ,cla :-1read $HOME/.vim/snippets/js/class.js<CR>:%s/<++>//g<left><left>
endfunction
" ts
autocmd filetype typescript call SetTSOptions()

function! SetTSOptions()
  "snippets
  call JSSnippets()
  setlocal ts=2 sts=2 sw=2
endfunction

autocmd filetype vue call SetVueOptions()

function! SetVueOptions()
  call JSSnippets()
  let g:vue_pre_processors = 'detect_on_enter'
endfunction

autocmd filetype html call SetHtmlOptions()

function! SetHtmlOptions()
  call JSSnippets()
endfunction

autocmd filetype jsx call SetJSXOptions()

function! SetJSXOptions()
  call JSSnippets()
endfunction

autocmd filetype tsx call SetTSXOptions()

function! SetTSXOptions()
  call JSSnippets()
endfunction

"go
autocmd FileType go call SetGoOptions()

function! SetGoOptions()
  " Wrap in logging
  nmap <leader>l yssfmt.Println<cr>
  "execute
  nnoremap <F2> :w <bar> :GoRun<CR>
  "doc
  nnoremap <F1> :w <bar> :GoDoc<CR>
endfunction

"python
autocmd FileType python call SetPythonOptions()

function! SetPythonOptions()
  " Wrap in logging
  nmap <leader>l yssfprint<cr>
  "execute
  nnoremap <F2> :w <bar> !python3 "%"<CR>
endfunction

" html skeleton
nnoremap ,html :-1read $HOME/.vim/snippets/html/skeleton.html<CR>7jf>a

"json fold
"autocmd filetype json syntax on
"autocmd filetype json set foldmethod=syntax

" Set filetype correctly for JSON-based lint config files
au BufNewFile,BufRead .eslintrc,.prettierrc,.babelrc set filetype=json

" Terminal go back to normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap :q! <C-\><C-n>:q!<CR>

" Showcase comments in italics
highlight Comment cterm=italic gui=italic

" Easy tab navigation
nnoremap <S-Left> :tabprevious<CR>
nnoremap <S-Right> :tabnext<CR>
" Buffers navigation
nnoremap <S-Up> :bn<CR>
nnoremap <S-Down> :bp<CR>

" move to next/previous error
nnoremap <M-Up> :lprevious<CR>
nnoremap <M-Down> :lnext<CR>

" redo
nnoremap U :redo<CR>

" yank and keep cursor at end of yank
vmap y y']

"-------------------------------------------------------------------------------
" ALE
"-------------------------------------------------------------------------------
let g:ale_linter_aliases = {
      \'vue': ['vue', 'javascript'],
      \'jsx': ['css', 'javascript'],
      \}

let g:ale_linters = {
      \'javascript': ['eslint'],
      \'typescript': ['eslint'],
      \'vue': ['eslint', 'vls'],
      \'jsx': ['eslint'],
      \}

let g:ale_fixers = {
      \'javascript': ['eslint'],
      \'typescript': ['eslint'],
      \'vue': ['eslint'],
      \'jsx': ['eslint'],
      \}
" Do not lint or fix minified files.
let g:ale_pattern_options = {
      \'\.min\.js$': {'ale_linters': [], 'ale_fixers': []},
      \'\.min\.css$': {'ale_linters': [], 'ale_fixers': []},
      \}

" If you configure g:ale_pattern_options outside of vimrc, you need this.
let g:ale_pattern_options_enabled = 1

let g:ale_lint_on_text_changed = 'never'

let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1

"map <Leader>l :ALEFix<CR>

" Shortcuts for vim-test
" Run test under cursor
nmap <silent> <leader>tu :w \| :TestNearest<CR>
" Run current file (otherwise last file)
nmap <silent> <leader>tf :TestFile<CR>
" Visit last test you ran
nmap <silent> <leader>tl :TestLast<CR>
" run all test
nmap <silent> <leader>ts :TestSuite<CR>
" visit last edited test file
nmap <silent> <leader>tv :TestVisit<CR>
let g:test#preserve_screen = 1
" make test commands execute using dispatch.vim
let test#strategy = "vimterminal"
" specify config file
" let g:test#javascript#jest#executable = 'jest --config ./config/jest/jest.conf.js'
let g:test#javascript#jest#options = '--config ./config/jest/jest.conf.js'

" Find/replace
nnoremap <leader>r :%s/\<<C-r><C-w>\>//gci<Left><Left><Left><Left>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace', '')<CR>

let g:auto_save = 0  " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0 " do not save in insert mode
let g:auto_save_events= ["InsertLeave", "TextChanged", "FocusLost"]

" airline conf
" enable airline tabs
let g:airline#extensions#tabline#enabled = 1

" show only filename
let g:airline#extensions#tabline#fnamemod = ':t'

" powerline
let g:airline_powerline_fonts = 1

" show hidden files
let NERDTreeShowHidden=1

" Get off my lawn - helpful when learning Vim :)
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>
"
"-------------------------------------------------------------------------------
" Neovim-specific configurations
"-------------------------------------------------------------------------------

if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  set termguicolors
  "colorscheme NeoSolarized
  set background=dark

  " Fix vim-tmux-navigator <C-h> https://git.io/viGRU
  "nmap <BS> <C-W>h

  " Fix vim-tmux-navigator <C-h> https://git.io/vS5QH
  "nmap <BS> :<C-u>TmuxNavigateLeft<CR>
  " Terminal Function
  let g:term_buf = 0
  let g:term_win = 0
  function! TermToggle(height)
    if win_gotoid(g:term_win)
      hide
    else
      botright new
      exec "resize " . a:height
      try
        exec "buffer " . g:term_buf
      catch
        call termopen($SHELL, {"detach": 0})
        let g:term_buf = bufnr("")
        set nonumber
        set norelativenumber
        set signcolumn=no
      endtry
      startinsert!
      let g:term_win = win_getid()
    endif
  endfunction
  " Toggle terminal on/off (neovim)
  nnoremap <A-t> :call TermToggle(12)<CR>
  inoremap <A-t> <Esc>:call TermToggle(12)<CR>
  tnoremap <A-t> <C-\><C-n>:call TermToggle(12)<CR>
endif

" Execute a macro over a visual range
" would be the equivalent to
" select visual range and type
" :'<,'>normal @<macro letter>
"xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>"

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

" a function to call !s from string
function SearchString(textobject)
  execute "normal yi" . a:textobject
  execute ":silent !s ". getreg('"') 
  execute ":redraw!"
endfunction

nnoremap <leader>si' :call SearchString("'")<CR>
nnoremap <leader>si" :call SearchString('"')<CR>
nnoremap <leader>sl :call SearchString('l')<CR>

"-------------------------------------------------------------------------------
" YCM
"-------------------------------------------------------------------------------

" Close preview window
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1

" use :lnext :lp to move between errors in file
let g:ycm_always_populate_location_list = 1

" disable auto documentation on over
let g:ycm_auto_hover = ''

" use leader d to display doc
nmap <leader>d <plug>(YCMHover)

" go to file in new tab
"nnoremap <Leader>o <C-W>gf<CR>
" use Ycm Goto instead
nnoremap <Leader>o :tab YcmCompleter GoTo<CR>

" GoToDeclaration
nnoremap <Leader>jd :YcmCompleter GoToDefinition<CR>

" GoToReferences
nnoremap <Leader>jr :YcmCompleter GoToReferences<CR>

" FixIt
nnoremap <Leader>jf :YcmCompleter FixIt<CR>

" remap diagnostic 
let g:ycm_key_detailed_diagnostics = '<leader>D'
let g:ycm_goto_buffer_command = 'new-or-existing-tab'

" disable preview
"set completeopt-=preview
" use it as popup, doesnt work for me but would be cool
"set completeopt+=popup

" customize quickfix window
function! s:CustomizeYcmQuickFixWindow()
  " Set the window height to 5.
  8wincmd _
endfunction

" call function on quickfix open
autocmd User YcmQuickFixOpened call s:CustomizeYcmQuickFixWindow()
" prevent window from closing automatically
autocmd User YcmQuickFixOpened autocmd! ycmquickfix WinLeave

" enable additionnal languages
source /Users/tristanwagner/dotfiles/vim/vim.symlink/ycm-ls/lsp-examples/vimrc.generated

function! VisualSelection(direction, extra_filter) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", "\\/.*'$^~[]")
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'gv'
    call CmdLine("Ack '" . l:pattern . "' " )
  elseif a:direction == 'replace'
    call CmdLine("%s" . '/'. l:pattern . '/')
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunction

function! CmdLine(str)
  call feedkeys(":" . a:str)
endfunction

" Move a line of text using ALT+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`zd
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" show hidden files
let NERDTreeShowHidden=1

" Surround-vim addition to delete a function
nmap <silent> dsf ds)db

" Convert slashes to backslashes for Windows.
if has('win32')
  nmap ,cs :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
  nmap ,cl :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

  " This will copy the path in 8.3 short format, for DOS and Windows 9x
  nmap ,c8 :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
  nmap ,cs :let @+=expand("%:t")<CR>
  nmap ,cps :let @+=expand("%")<CR>
  nmap ,cpl :let @+=expand("%:p")<CR>
  nmap ,cr :let @*=expand("%:p") . ":" . (line(".")+1)<CR>
endif

" file type messages is for highlights when checking logs like in /var/log
nnoremap <Leader>m :set filetype=messages<CR>

" Shortcuts for frequently accessed files
command! Vimrc e ~/.vimrc
command! Zshrc e ~/.zshrc
command! Gitconfig e ~/.gitconfig

"debugger
let g:vimspector_enable_mappings = 'HUMAN'

let g:markdown_fenced_languages = ['python', 'javascript', 'json', 'bash', 'typescript', 'html']

" rainbow parentheses
let g:rainbow_active = 0 "set to 0 if you want to enable it later via :RainbowToggle

let g:rainbow_conf = {
      \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
      \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
      \   'guis': [''],
      \   'cterms': [''],
      \   'operators': '_,_',
      \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
      \   'separately': {
      \      '*': {},
      \      'javascript': {
      \         'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
      \      },
      \      'typescript': {
      \         'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
      \      },
      \      'vue': {
      \         'parentheses': ['start=/{/ end=/}/ contains=@javaScript containedin=@javaScript',
      \             'start=/(/ end=/)/ contains=@javaScript containedin=@javaScript',
      \             'start=/[/ end=/]/ contains=@javaScript containedin=@javaScript',
      \             'start=/{/ end=/}/ contains=@javaScript containedin=@javaScript',
      \             'start=/(/ end=/)/ contains=@typeScript containedin=@typeScript',
      \             'start=/[/ end=/]/ contains=@typeScript containedin=@typeScript',
      \             'start=/\v\<((script|style|area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
      \      },
      \      'css': 0,
      \   }
      \}

" Go
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_functions_calls = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1

" abbreviations
" insert current date/time
iabbrev <expr> ddd strftime('%d/%m/%y %H:%M:%S')
iabbrev #i #include
iabbrev #d #define

"shortcuts for parenthesis etc
inoremap $1 ()<esc>i
inoremap $2 []<esc>i
inoremap $3 {}<esc>i
inoremap $4 {<esc>o}<esc>O
inoremap $q ''<esc>i
inoremap $$ ""<esc>i
inoremap $e ``<esc>i
inoremap $t <><esc>i

"visual mode surround 
vnoremap $1 <esc>`>a)<esc>`<i(<esc>
vnoremap $2 <esc>`>a]<esc>`<i[<esc>
vnoremap $3 <esc>`>a}<esc>`<i{<esc>
vnoremap $$ <esc>`>a"<esc>`<i"<esc>
vnoremap $q <esc>`>a'<esc>`<i'<esc>
vnoremap $e <esc>`>a`<esc>`<i`<esc>

" escape insert mode
inoremap jj <esc>
inoremap hh <esc>

" fix gx for opening url
" nmap gx yiW:!open <cWORD><CR> <C-r>" & <CR><CR>
" vnoremap gx // :!open <C-r>" & <CR><CR>

" open notes
noremap <leader>en :edit ~/dev/notes/README.adoc<CR>
" copy current filname:line number into clipboard, then use gF to open the ref
noremap <leader>er :let @*=expand("%:p") . ":" . (line(".")+1)<CR>


"sideways.vim conf
" alt + h or alt + l to move arg left or right
nnoremap <M-h> :SidewaysLeft<CR>
nnoremap <M-l> :SidewaysRight<CR>

" argument text object
" for example 'daa' delete an argument
omap aa <Plug>SidewaysArgumentTextobjA
xmap aa <Plug>SidewaysArgumentTextobjA
omap ia <Plug>SidewaysArgumentTextobjI
xmap ia <Plug>SidewaysArgumentTextobjI

" rebind alt key modifier
if has("mac") || has("macunix")
  nmap Ï <M-j>
  nmap È <M-k>
  nmap Ì <M-h>
  nmap ¬ <M-l>
  vmap Ï <M-j>
  vmap È <M-k>
  vmap Ì <M-h>
  vmap ¬ <M-l>
endif

function! OpenLog()
  let line = getline(".")
  let items = split(line, ':')
  if filereadable(items[0])
    tabnew
    exe "e ".items[0]
    exe ":".items[1]
  endif
endfunction

" asciidoc
" automaticaly generate html on save
" augroup ON_ASCIIDOCTOR_SAVE | au!
"     au BufWritePost *.adoc :Asciidoctor2HTML
" augroup end

let g:asciidoctor_opener='open'

func! DeleteTillSlash()
    let g:cmd = getcmdline()

    if has("win16") || has("win32")
        let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
    else
        let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
    endif

    if g:cmd == g:cmd_edited
        if has("win16") || has("win32")
            let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
        else
            let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
        endif
    endif

    return g:cmd_edited
endfunc

" press $q in command mode to delete until last slash
cno $q <C-\>eDeleteTillSlash()<cr>

" close buffer
map <leader>bd :bd<cr>
" close all buffers
map <leader>ba :bufdo bd!<cr>

" switch cwd to open buffer dir
map <leader>cd :cd %:p:h<cr>:pwd<cr>

function! DeleteDuplicateLines() range
  let lineCounts = {}
  let lineNum = a:firstline
  while lineNum <= a:lastline
    let lineText = getline(lineNum)
    if lineText != ""
        if has_key(lineCounts, lineText)
            execute lineNum . 'delete _'
            if lineCounts[lineText] > 0
              execute lineCounts[lineText] . 'delete _'
              let lineCounts[lineText] = 0
              let lineNum -= 1
            endif
        else
            let lineCounts[lineText] =  lineNum
            let lineNum += 1
        endif
    else
      let lineNum += 1
    endif
  endwhile
endfunction
command! -range=% DeleteDuplicateLines <line1>,<line2>call DeleteDuplicateLines()

function! HandleURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;()]*')
  let s:uri = split(s:uri, '[')[0]
  let s:uri = shellescape(s:uri, 1)
  echom s:uri
  if s:uri != ""
    silent exec "!open ".s:uri
    :redraw!
  else
    echo "No URI found in line."
  endif
endfunction

nnoremap gx :call HandleURL()<CR>
nnoremap <leader>u :call HandleURL()<CR>

nnoremap dn ]c
nnoremap dN [c
