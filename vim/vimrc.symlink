" use vim like tail => open file and put this in it
" :set autoread | au CursorHold * checktime | call feedkeys("lh")
"
" Vim settings for https://github.com/tristanwagner
"

" Settings in this file may depend on plugins, so let's install them first.
" Not to be confused with the contents of ~/.vim/plugin/* which are
" configuration options for each plugin and automatically loaded by Vim.

source ~/.vim/plugin/plugins.vim

" check these 2 plugins
"
" https://github.com/carlitux/deoplete-ternjs
"
" https://github.com/skwp/greplace.vim

" Leader Mappings
map <Space> <leader>
map <Leader>w :update<CR>
map <Leader>q :qall<CR>
map <Leader>gs :Gstatus<CR>

" go to file in new tab
nnoremap <Leader>o <C-W>gf<CR>
"
" Nerdtree
map <C-b> :NERDTreeToggle<CR>

" CtrlP use FZF (faster!)
nnoremap <C-p> :Files<Cr>

" prettify json
nnoremap <Leader>p :%!python -m json.tool<CR>

" ex mode is useless
nnoremap Q :q<CR>

" ragequit
nnoremap <C-q> :q!<CR>

" git status
nnoremap <Leader>g :Git<CR>

" use ag instead of ack ?
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

cnoreabbrev ag Ack!
cnoreabbrev aG Ack!
cnoreabbrev Ag Ack!
cnoreabbrev AG Ack!
cnoreabbrev Ack Ack!

" fuzzy search
nnoremap <Leader>f :tabnew<CR>:Ack!<Space>""<left>

syntax enable

autocmd Filetype scss if getfsize(@%) > 300 | setlocal syntax=OFF | endif

let g:ackprg = 'ag --vimgrep --hidden --path-to-ignore ~/.ignore'

" displays better title in gnome terminal tab :)
set mouse=a                           " enable mouse
set list                              " enable invisible chars
set nocompatible
set hidden                            " hidde buffers instead of closing them
set smartindent
set title
set autoread                          " Auto reload changed files
set wildmenu                          " Tab autocomplete in command mode
set backspace=indent,eol,start        " http://vi.stackexchange.com/a/2163
set clipboard=unnamed                 " Clipboard support (OSX)
set laststatus=2                      " Show status line on startup
set splitright                        " Open new splits to the right
set splitbelow                        " Open new splits to the bottom
"set lazyredraw                        " Reduce the redraw frequency, this one
"fuck up the scroll
set nolazyredraw                        " Reduce the redraw frequency
set ttyfast                           " Send more characters in fast terminals
set nowrap                            " Don't wrap long lines
set listchars=extends:→               " Show arrow if line continues rightwards
set listchars+=precedes:←             " Show arrow if line continues leftwards
set nobackup nowritebackup noswapfile " Turn off backup files
set noerrorbells novisualbell         " Turn off visual and audible bells
set expandtab shiftwidth=2 tabstop=2  " Two spaces for tabs everywhere
set history=500
set hlsearch                          " Highlight search results
set ignorecase smartcase              " Search queries intelligently set case
set incsearch                         " Show search results as you type
set timeoutlen=1000 "ttimeoutlen=0     " Remove timeout when hitting escape
set showcmd                           " Show size of visual selection

set pastetoggle=<F2>                  " Paste mode is cool if you paste a big chunk of text

" Persistent undo
set undodir=~/.vim/undo/
set undofile
set undolevels=1000
set undoreload=10000

" Ignored files/directories from autocomplete (and CtrlP)
set wildignore+=*/tmp/*
set wildignore+=*.so
set wildignore+=*.zip
set wildignore+=*/vendor/bundle/*
set wildignore+=*/node_modules/

"-------------------------------------------------------------------------------
" Interface
"-------------------------------------------------------------------------------

set number            " Enable line numbers
set scrolloff=5       " Leave 5 lines of buffer when scrolling
set sidescrolloff=10  " Leave 10 characters of horizontal buffer when scrolling

"-------------------------------------------------------------------------------
" Colors & Formatting
"-------------------------------------------------------------------------------

let g:solarized_termcolors=256
set t_Co=256
colorscheme molokai
" colorscheme solarized
set background=dark

" Showcase comments in italics
highlight Comment cterm=italic gui=italic

" Easy tab navigation
nnoremap <S-Left> :tabprevious<CR>
nnoremap <S-Right> :tabnext<CR>
nnoremap <S-Up> :bp<CR>
nnoremap <S-Down> :bn<CR>

" redo
nnoremap U :redo<CR>

" yank and keep cursor at end of yank
vmap y y']

" ALE
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {
      \'javascript': ['eslint'],
      \}

" very much needed, syntax checking for python is meh
let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }

let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0

" Only run linters named in ale_linters settings.
let g:ale_linters_explicit = 1

map <Leader>l :ALEFix<CR>

" Find/replace
nnoremap <C-r> :%s/\<<C-r><C-w>\>//gci<Left><Left><Left><Left>


let g:auto_save = 0  " enable AutoSave on Vim startup
let g:auto_save_in_insert_mode = 0 " do not save in insert mode
let g:auto_save_events= ["InsertLeave", "TextChanged", "FocusLost"]

" airline conf
" enable airline tabs
let g:airline#extensions#tabline#enabled = 1

" show only filename
let g:airline#extensions#tabline#fnamemod = ':t'

" powerline
let g:airline_powerline_fonts = 1

" show hidden files
let NERDTreeShowHidden=1

" Get off my lawn - helpful when learning Vim :)
"nnoremap <Left> :echoe "Use h"<CR>
"nnoremap <Right> :echoe "Use l"<CR>
"nnoremap <Up> :echoe "Use k"<CR>
"nnoremap <Down> :echoe "Use j"<CR>
"
"-------------------------------------------------------------------------------
" Neovim-specific configurations
"-------------------------------------------------------------------------------

if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  set termguicolors
  colorscheme NeoSolarized
  set background=dark

  " Fix vim-tmux-navigator <C-h> https://git.io/viGRU
  nmap <BS> <C-W>h

  " Fix vim-tmux-navigator <C-h> https://git.io/vS5QH
  nmap <BS> :<C-u>TmuxNavigateLeft<CR>
endif

nmap <Leader>= <Plug>YSsurround<CR><C-}>

"
" Convert slashes to backslashes for Windows.
if has('win32')
  nmap ,cs :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
  nmap ,cl :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

  " This will copy the path in 8.3 short format, for DOS and Windows 9x
  nmap ,c8 :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
  nmap ,cs :let @+=expand("%:t")<CR>
  nmap ,cps :let @+=expand("%")<CR>
  nmap ,cpl :let @+=expand("%:p")<CR>
endif

" file type messages is for highlights when checking logs like in /var/log
nnoremap <Leader>m :set filetype=messages<CR>

" Execute a macro over a visual range
" would be the equivalent to
" select visual range and type
" :'<,'>normal @<macro letter>
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>

function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction
