# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnosterzak"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)
plugins+=(zsh-nvm history-substring-search vi-mode)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

export EDITOR='vim'
# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias vim='vim'
alias vps='ssh root@vps473324.ovh.net'
alias open='nautilus .'

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

source $ZSH/oh-my-zsh.sh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

source ~/.aliases

function vgst () {
 vim $(git status --porcelain | awk '{print $2}')
}

# send hexadecimal value in binary format over udp to remote adress and port
# usage :
#  udp <hex> <host> <port>
function udp () {
  echo -n $1 | xxd -r -p | nc -u $2 $3
}

# send hexadecimal value in binary format over udp to remote adress and port
#  usage :
#  udp <hex> <host> <port>
function tcp () {
  echo -n  $1 | xxd -r -p | nc $2 $3
}

# funny conversion back and forth of a file
#  hextoascii $(xxd -p install | tr -d '\n')
function hextoascii () {
  echo -n $1 | xxd -p -r
}

function asciitohex () {
  echo -n $1 | xxd -p
}

function filter () {
  echo -n $1 | tr -d $2
}

function replace () {
  echo -n $1 | tr $2 $3
}

# Get weather
function weather {
  if [ $# -ne 1 ]; then
    echo "Usage: weather <location | zipcode | query>"
    return
  fi

  curl http://wttr.in/$1
}

# easy encryption
function encrypt {
  if [ $# -ne 3 ]; then
    echo "Usage: encrypt <e | d> <input-file> <output-file>"
    return
  fi

  echo $@

  if [ $1 '==' "e" ]; then
    echo "Encrypting $1..."
    openssl enc -aes-256-cbc -salt -a -in $2 -out $3 || { echo "File not found"; return 1; }
    echo "Successfully Encrypted"
  elif [ $1 '==' 'd' ]; then
      echo "Decrypting $1..."
      openssl enc -aes-256-cbc -d -a -in $2 -out $3 || { echo "File not found"; return 1; }
      echo "Successfully Decrypted"
  fi
}

# display csv files
function csv {
    if [ $# -ne 1 ]; then
    echo "Usage: csv <filename>"
    return
  fi

    less $1 | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S
}

# Create react native components
function rn-comp {
  if [ $# -ne 1 ]; then
    echo "Usage: rn-comp <component-name>"
    return
  fi

  # Create basic files
  mkdir ./app/components/$1
  > ./app/components/$1/index.js
  > ./app/components/$1/$1.js
  > ./app/components/$1/styles.js;

  # Add boilerplate
  echo "import $1 from \"./$1\";
import styles from \"./styles\";

export { $1, styles };" > ./app/components/$1/index.js;

  echo "import EStyleSheet from \"react-native-extended-stylesheet\";

export default EStyleSheet.create({});" > ./app/components/$1/styles.js

  echo "import React from \"react\";
import propTypes from \"prop-types\";
import { View, Text } from \"react-native\";

import styles from \"./styles\";

const $1 = () => (
  <View>
    <Text>$1 Component</Text>
  </View>
);

$1.propTypes = {};

export default $1;" > ./app/components/$1/$1.js
}

# Boost audio of video file by x dB, can be negative
function boost {
  if [ $# -ne 3 ]; then
    echo "Usage: boost <inputfile> <outputfile> <boostvalue>"
    return
  fi

  ffmpeg -i $1 -vcodec copy -af "volume=$3dB" $2
}

# make directory and change working directory to it
function mcd {
    if [ $# -ne 1 ]; then
      echo "Usage: mcd <directory-name>"
      return
    fi

    mkdir $1
    cd $1
}

# Always use correct program to extract files
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f $1 ] ; then
        # NAME=${1%.*}
        # mkdir $NAME && cd $NAME
        case $1 in
          *.tar.bz2)   tar xvjf ./$1    ;;
          *.tar.gz)    tar xvzf ./$1    ;;
          *.tar.xz)    tar xvJf ./$1    ;;
          *.lzma)      unlzma ./$1      ;;
          *.bz2)       bunzip2 ./$1     ;;
          *.rar)       unrar x -ad ./$1 ;;
          *.gz)        gunzip ./$1      ;;
          *.tar)       tar xvf ./$1     ;;
          *.tbz2)      tar xvjf ./$1    ;;
          *.tgz)       tar xvzf ./$1    ;;
          *.zip)       unzip ./$1       ;;
          *.Z)         uncompress ./$1  ;;
          *.7z)        7z x ./$1        ;;
          *.xz)        unxz ./$1        ;;
          *.exe)       cabextract ./$1  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
    else
        echo "$1 - file does not exist"
    fi
  fi
}

# color man pages
function man {
  env LESS_TERMCAP_md=$'\033[1;34m' \
    LESS_TERMCAP_us=$'\033[0;36m' \
    LESS_TERMCAP_so=$'\033[1;31m' \
    LESS_TERMCAP_mb=$'\033[0m' \
    LESS_TERMCAP_me=$'\033[0m' \
    LESS_TERMCAP_se=$'\033[0m' \
    LESS_TERMCAP_ue=$'\033[0m' \
    man "$@"
}

# Show how much memory is used by a command
function mem() {
  if [ $1 ]
  then
    echo "$1 mem usage:\n"

    ps -eo "rss,cmd" | sed -e 's/^[ \t]*//' | cut -d ' ' -f -2 | grep "$1" | while read data
  do
    mem=$(echo $data | cut -d ' ' -f 1)
    bin=$(echo $data | cut -d ' ' -f 2)
    if [ $sum ]; then echo -n '+'; fi
    echo "$(($mem/1024)) Mio ($bin)"
    sum=$((sum+mem))
  done

  echo "\nTotal $1 mem usage: $((sum/1024)) Mio"
  unset sum
fi
}

# kills process running on specific port
# TODO: handle if no process to kill
function killp () {
  kill $(sudo lsof -t -i:$1)
}

# vf - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
# you can also multi select results by pressing tab/shift tab in fzf
# it'll open the selected files in vim with files in buffers
function vf() {
  local files

  files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf -x --read0 -0 -1 -m)"})

  if [[ -n $files ]]
  then
     vim -- $files
     print -l $files[1]
  fi
}

# fuzzy grep open via ag with line number
# you can also multi select results by pressing tab/shift tab in fzf
# it'll open the selected files in vim with files in buffers
# you need file:line plugin or it won't work
# https://www.vim.org/scripts/script.php?script_id=2184
function vg() {
  local files

  read -r -d "\n" files <<<"$(ag --nobreak --noheading $@ | fzf -0 -1 -m | awk -F: '{print $1 ":" $2}')"

  echo $files

  if [[ -n $files ]]
  then
    #version maison
    #vim $(replace $files '^@' ' ')
    #version sed
    vim $(echo $files | sed -e 's/\^@/ /')
  fi
}

# naviguate through commits
function gcshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# checkout commit
function gcco() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# checkout branches
function gbco() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# find history
# and run select command(s)
# you can specify a separator, for example fh ";" or fh "&&"
function fh () {
  local cmds
  cmds=$(history | fzf --tac +s +m -e -m | sed "s/[^\d]* //")
  if [ $1 ]
  then
    cmds=${cmds/$'\n'/ $1}
    echo $cmds
    eval $cmds
  else
    if [[ ! -z "$cmds" ]]
    then
      echo $cmds
      eval $cmds
    fi
  fi
}

# browse mans
function fman() {
    man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
}

function stopwatch () {
  date1=`date +%s`; while true; do
   echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r";
  done
}

# load forgit
source ~/.oh-my-zsh/custom/plugins/forgit.plugin.zsh

export PATH=/home/tristan/.cargo/bin:$PATH

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
